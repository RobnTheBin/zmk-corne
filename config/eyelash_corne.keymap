#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define GAMING 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define WLAYER 5
#define ELAYER 6
#define NLAYER 7
#define MACRO 8

// Caps Word
&caps_word {
    continue-list = <UNDERSCORE MINUS LS(SLASH) BACKSPACE>;
};

// Layer Tap
&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <200>;
};

// Sticky key
&sk {
    release-after-ms = <2000>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

// Mouse Movement
&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <200>;
    acceleration-exponent = <1>;
};

// Mouse Scroll
&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <1000>;
    acceleration-exponent = <2>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_rename {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp F2>;
        };

        combo_m {
            timeout-ms = <25>;
            key-positions = <15 16>;
            bindings = <&kp M>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_off {
            timeout-ms = <25>;
            key-positions = <0 11>;
            bindings = <&kp C_POWER>;
        };

        combo_o {
            timeout-ms = <50>;
            key-positions = <26 28>;
            bindings = <&kp O>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_i {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp I>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_task {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp LC(LS(ESC))>;
        };
        
        combo_f10 {
            timeout-ms = <50>;
            key-positions = <3 4 5>;
            bindings = <&kp F10>;
        };

        combo_sound {
            timeout-ms = <10>;
            key-positions = <25 29>;
            bindings = <&kp LG(A)>;
        };
        
        combo_lock {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LG(L)>;
        };

        combo_ctrl_t {
            timeout-ms = <50>;
            key-positions = <17 53>;
            bindings = <&kp LC(T)>;
        };

        combo_win_e {
            timeout-ms = <30>;
            key-positions = <15 53>;
            bindings = <&kp LG(E)>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <15 26 28>;
            bindings = <&kp F5>;
            layers = <0 2 3 4 5 6>;  
        };

        combo_we {
            timeout-ms = <30>;
            key-positions = <14 15>;
            bindings = <&kp ESC>;
            layers = <0 2 3 4 5 6>; 
        };

        combo_al {
            timeout-ms = <30>;
            key-positions = <25 33>;
            bindings = <&caps_word>;
        };

        combo_wk {
            timeout-ms = <50>;
            key-positions = <14 32>;
            bindings = <&kp TAB>;
        };

        combo_wl {
            timeout-ms = <50>;
            key-positions = <14 33>;
            bindings = <&kp CAPS>; 
        };

        combo_45 {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LC(LS(ESC))>;
        };

        combo_f24 {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&kp F24>;
        };

        combo_sticky {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&sl MACRO>;
        };

        combo_prscrn {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp PSCRN>;
        };

    };
};

/ {
    macros {
        m_speed1: m_speed1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <200>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp LS(R)>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp KP_N2 &kp KP_N0 &kp KP_N0>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp ENTER>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            m_speed2: m_speed2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <200>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp LS(R)>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp KP_N4 &kp KP_N0 &kp KP_N0>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp ENTER>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            m_speed3: m_speed3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <200>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp LS(R)>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp KP_N8 &kp KP_N0 &kp KP_N0>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp ENTER>
                ,<&macro_wait_time 20>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            m_del5: m_del5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <20>;
            bindings
                = 
                <&macro_tap &kp LS(LC(LA(L)))>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp RIGHT>
                ,<&macro_tap &kp Q>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp LEFT>
                ,<&macro_tap &kp SPACE>
                ;
        };
            m_mute: m_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <20>;
            bindings
                = 
                <&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ,<&macro_tap &kp LS(LC(LA(O)))>
                ;
        };
            caret: caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings
            = <&macro_press &kp LALT>
            , <&macro_tap &kp KP_N9 &kp KP_N4>
            , <&macro_release &kp LALT>
            ;

        };

            backtick: backtick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings
            = <&macro_press &kp LALT>
            , <&macro_tap &kp KP_N0 &kp KP_N9 &kp KP_N6>
            , <&macro_release &kp LALT>
            ;

        };

            buildl: buildl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
            = <&macro_tap &kp LS(LC(LA(LEFT)))>
            , <&macro_tap &bootloader>
            ;

        };

            buildr: buildr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <100>;
            bindings
            = <&macro_tap &kp LS(LC(LA(RIGHT)))>
            ;

        };
            cstest: cstest {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = 
                <&macro_tap &kp N1>
                ,<&macro_tap &kp DOT &kp B &kp K &kp K &kp ENTER>
                ,<&macro_tap &kp DOT &kp F &kp T &kp M &kp ENTER>
                ,<&macro_tap &kp DOT &kp M &kp P &kp I &kp ENTER>
                 ;
        };

            swapp: swapp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <1>;
            tap-ms = <1>;
            bindings
                = 
                <&macro_press &kp LALT>
                ,<&macro_tap &kp TAB>
                ,<&macro_release &kp LALT>
                 ;
        };


    };
};



&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
      bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-while-undecided;
        };
    };

    behaviors {
        ebhm: enhanced_balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&sl>;
            hold-while-undecided;
        };
    };

    behaviors {
        lkp: layer_keypress {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    behaviors {
        lshift: lshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&sk>;
        };
    };
    
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp KP_MULTIPLY>, <&kp KP_DIVIDE>;
        };
    };

    behaviors {
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp KP_MINUS>, <&kp KP_PLUS>; 
        };
    };

    behaviors {
        quotation: quotation {
            compatible = "zmk,behavior-mod-morph"; 
            #binding-cells = <0>;
            bindings = <&kp LS(BSLH)>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    behaviors {
        bspc_hacek: backspace_hacek {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp EQUAL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    behaviors {
        u_exclam: u_exclam {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };
    
    behaviors {
        ctrl_z: ctrl_z {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp Y>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
    }; 

    behaviors {
        ctrl_c: ctrl_c {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lkp LOWER SPACE>, <&kp C>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
    };

    behaviors {
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DEL>;
            mods = <(MOD_LSFT)>;
        };
    };

    //Ctrl V
    behaviors {
        ctrl_v: ctrl_v {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bhm LALT ENTER>, <&kp V>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
    };
    
    behaviors {
            ctrl_x: ctrl_x {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&sl NLAYER>, <&kp X>;
                mods = <(MOD_LCTL)>;
                keep-mods = <(MOD_LCTL)>;
            };
        };

    behaviors {
            mod_f: mod_f {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LCTL F>, <&kp F>;
                mods = <(MOD_LSFT)>;
                keep-mods = <(MOD_LSFT)>;
            };
        };
        
    behaviors {
            mod_g: mod_g {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LC(LS(LALT)) G>, <&kp G>;
                mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
                keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
            };
        };

    behaviors {
            mod_t: mod_t {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LG(LC(LS(LALT))) T>, <&kp T>;
                mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
                keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LCTL)>;
            };
        };

    behaviors {
            mod_d: mod_d {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LSHFT D>, <&kp D>;
                mods = <(MOD_LSFT)>;
                keep-mods = <(MOD_LSFT)>;
            };
        };

    behaviors {
            mod_j: mod_j {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LCTL J>, <&kp J>;
                mods = <(MOD_LSFT)>;
                keep-mods = <(MOD_LSFT)>;
            };
        };

    behaviors {
            mod_k: mod_k {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LSHFT K>, <&kp K>;
                mods = <(MOD_LSFT)>;
                keep-mods = <(MOD_LSFT)>;
            };
        };
        
    behaviors {
            mod_at: mod_at {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LCTL RA(V)>, <&kp RA(V)>;
                mods = <(MOD_LSFT)>;
                keep-mods = <(MOD_LSFT)>;
            };
        };

    behaviors {
            mod_und: mod_und {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&bhm LSFT LS(SLASH)>, <&kp LS(SLASH)>;
                mods = <(MOD_LSFT)>;
                keep-mods = <(MOD_LSFT)>;
            };
        };





    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp TAB             &kp Q        &lt WLAYER W &lt ELAYER E   &kp R        &mod_t                            &kp Y           &kp U       &kp I     &kp O     &kp P      &quotation
&lshift LSHFT LSHFT &kp A        &kp S        &mod_d         &mod_f       &mod_g                            &kp H           &mod_j      &mod_k    &kp L     &u_exclam  &kp ENTER
&kp LCTRL           &ctrl_z      &kp X        &kp C          &kp V        &kp B            &kp C_MUTE       &kp N           &kp M       &kp COMMA &kp DOT   &kp FSLH   &kp RSHFT
                                              &ctrl_x        &ctrl_c      &ctrl_v                           &kp BSPC        &sl RAISE   &kp F16 
            >;

             sensor-bindings = <&scroll_encoder>;
        };

        lower_layer {
            display-name = "POTATO";
            bindings = <
&trans  &kp N1           &kp N2          &kp N3        &kp N4        &kp N5                                         &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
&trans  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                         &trans        &trans        &trans                                                                          &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_5 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_6 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_7 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_8 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_9 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
